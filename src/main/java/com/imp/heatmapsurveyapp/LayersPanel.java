/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.imp.heatmapsurveyapp;

import java.awt.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author dml
 */
public class LayersPanel extends javax.swing.JPanel implements ListSelectionListener  {

    private JScrollPane jScrollPane1;
    public JList<ListItem> layerListBox;
    private LayerListSelectionListener selectedListener;

    /**
     * Creates new form LayersPanel
     */
    public LayersPanel() {
        initComponents();
        initPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 401, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<ListItem> items;
    private HashMap<String, Object> sourceItems;

    private void initPanel() {
        jScrollPane1 = new javax.swing.JScrollPane();
        layerListBox = new javax.swing.JList<>();
        

        /*
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        */
        jScrollPane1.setViewportView(layerListBox);
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );
        
        layerListBox.addListSelectionListener(this);
    }
    
    
    void setItems(ArrayList<ListItem> in_items) {
    
        if (sourceItems == null)
            sourceItems = new HashMap<>();
        
        for(ListItem item : in_items) {
            sourceItems.put(item.name, item);
        }
        
        items = new DefaultListModel<>();
        for (HashMap.Entry<String, Object> item : sourceItems.entrySet()) {
            
            ListItem li = (ListItem) item.getValue();
            items.addElement(li);
        }        
        
        layerListBox.setModel(items);
    }
    
    void setLayerSelectedListener(LayerListSelectionListener in_listener)
    {
        this.selectedListener = in_listener;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getFirstIndex() < 0)
            return;        
        
        if (this.selectedListener != null) {
            this.selectedListener.OnLayerListItemSelected((ListItem)items.get(e.getFirstIndex()));
        }
        
    }
    
    public interface LayerListSelectionListener 
    {
        void OnLayerListItemSelected(ListItem item);
    }
}
