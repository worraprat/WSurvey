/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.imp.heatmapsurveyapp;

import java.awt.Color;
import java.awt.Event;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

/**
 *
 * @author dml
 */
public class HeatMapPanel extends javax.swing.JPanel implements MouseListener, MouseMotionListener {

    public static final Color COLOR_LOW = Color.RED;
    public static final Color COLOR_HIGH = Color.GREEN;
    
    public int minimumValue;
    public int maximumValue;    
    
    private GradientPaint gp;

    /**
     * Creates new form HeatMapPanel
     */
    public HeatMapPanel() {
        initComponents();
        initPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initPanel() {
        minimumValue = -50;
        maximumValue = 0;
        
        addMouseListener(this);
        addMouseMotionListener((MouseMotionListener) this);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);        

        int pads = 64;
        int bars = 5;
        
        int fh = g.getFontMetrics().getHeight();
        
        int w = getWidth();
        int h = getHeight(); 
        Color st = COLOR_LOW; //new Color(0, 255, 0);
        Color en = COLOR_HIGH; ////new Color(255, 0, 0);
        if (gp == null) 
            gp = new GradientPaint( 1, 1, st, 1, h, en); 
        
        Graphics2D gfx = (Graphics2D) g;
        
        gfx.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        gfx.setPaint(gp);
        g.fillRect(0, 0, w - pads, h);
        
        for(int i = 0; i <= bars; i++)
        {
            float x = w - pads;
            float y = i * (h / bars);
            
            if (i == 0)
                y = fh;
            if (i == bars)
                y = h - 8;
            
            float v = y;
            
            gfx.drawString(formatValue(getValue(v)), x + 8, y);
        }
        
        if (selecting) {
            
            int y = (int) selectY;
            
            g.setColor(Color.YELLOW);
            g.drawLine(0, y, w, y);
            
            g.setColor(Color.BLACK);
            g.drawString(formatValue(getValue(selectY)), w-pads, y);
        }
    }
    
    private OnEventListener eventListener;
    public boolean selecting;
    public float selectY;
    
    public float rescale(float value, float old_min, float old_max, float new_min, float new_max) {
        return ( (value - old_min) / (old_max - old_min) ) * (new_max - new_min) + new_min ;
    }
    
    public float getValue(float value) {
        
        return rescale(value, 0, getHeight(), minimumValue, maximumValue);
    }
    
    public static String formatValue(float value) {
        
        return String.format("", value);
    }
            

    void setEventListener(OnEventListener listener) {
        eventListener = listener;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (eventListener != null) {
            int y = e.getY();
            eventListener.OnLevelSelected(this, getValue(y));
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {        
    }

    @Override
    public void mouseReleased(MouseEvent e) {        
    }

    @Override
    public void mouseEntered(MouseEvent e) {   
        selecting = true;
    }

    @Override
    public void mouseExited(MouseEvent e) {
        selecting = false;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        
        selectY = e.getY();
        repaint();
    }
    
    
    public float normalize(float value, float min, float max) {
        return (value - min) / (max - min);
    }
            
    
    public Color getHeatMapColor(float value) {
        Color color1 = COLOR_HIGH;
        Color color2 = COLOR_LOW;
        float percent = normalize(value, minimumValue, maximumValue);
        float inverse_percent = (float) (1.0 - percent); 
        int redPart = (int) (color1.getRed()*percent + color2.getRed()*inverse_percent);
        int greenPart = (int) (color1.getGreen()*percent + color2.getGreen()*inverse_percent);
        int bluePart = (int) (color1.getBlue()*percent + color2.getBlue()*inverse_percent);
        return new Color(redPart, greenPart, bluePart);
    }


    interface OnEventListener
    {
        void OnLevelSelected(Object sender, float value);
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
